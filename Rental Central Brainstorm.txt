ORIGINAL README HELD INSTRUCTION TO US FOR THE PROJECT:
# Rental Central

Brief description of the project:
    Rental Central provides a rental service for gamers to rent or buy games. A timeline for rent is provided upon rent. After a specific amount of time, the renter is charged an overdue fee. Collecting information
    about the user is essential to keep a renter accountable. 
    -Name of the Game
    -Name of the Renter
    -Address of the Renter
    -Age of the Renter
    -Quantity
    -Rating E,T,M,Ao,etc
    -Game Sharing
    -Game Exchange
    -Lending Time
    -Overdue Cost
    -General Cost
    -Merchant Service
        -Card information
    -Genre
    -Platform
    -Access Codes
    -Game inventory
    
Code Ideas:
    -Quick Test
    -Creating New Users
    -Hardcoded Users for testing purposes
    -Searching for Users
    -Refresh stock
    -Animations?
        -Text Art
        
List of contributors:
    Jennifer Rose:  Niffinator
    Daniel Guernsey: DanielGuernsey99
    Jiya Stroder: JStrod

Classes Created:
Customer Class: Jiya Stroder, JStrod
    
Submit the link to my gitAccount and the link to the project in the assignment link in Canvas.
*************************************************************************************************


ORIGINAL BRAINSTORM DOCUMENTATION

UPDATED IN FILE
Customer Class
-First Name *
-Last Name *
-Address
-City *
-State *
-ZIP *
-CustomerID * change from game ID
-Balance *

Game Class
-Renting Game Method 
**When the game is rented the method will create a transaction to change that game's status and attach the customerid to the game
  

Transaction Class
-gameid
-customerid
-daterented
-duedate
-charge
--lateFee Method ---this method will calculate every 7 days that the return is overdue and then call the updateCustomerBalance method
--updateCustomerBalance Method ---this method changes customer class balance based on the transaction amount (+ for new rental / -for paid)



Inventory Class
(Customer Class Array) holds all the customers as they are created
(Game Class Array) holds all the game objects as they are created
(Transaction Array) holds all the transactions
--Search by CustomerID
----Name
----Address
--Search by GameID
----Name
----Genre
----Rating
----Platform
----Status
----Due Date

visualEffects class

UPDATE IN FILE - NEED TO WRITE SEARCHES
Main Method
-Run Search Methods
-Run Renting Game Method
-Run visualEffects Methods





***Game copies will have individual gameIDs for each individual copies***



GUI NOTES

-Splash Screen
-GIFs
-No Obnoxious colors


